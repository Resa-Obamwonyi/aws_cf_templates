# How to execute shell scripts:
# ./<file_name> argument_1 argument_2 argument_3
# e.g ./create.sh lucidinfra cfimage.yml cfiparams.json


AWSTemplateFormatVersion: 2010-09-09
Description: Resa / This template deploys a structure based on the challenge 2 CF Image

Parameters:
        EnvironmentName:
            Description: An environment name that will be prefixed to resource names
            Type: String
        
        VpcCIDR:
            Description: Please enter the IP range (CIDR notation) for this VPC
            Type: String
            Default: 10.0.0.0/16

        PublicSubnetCIDR:
            Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
            Type: String
            Default: 10.0.0.0/24

        PrivateSubnetCIDR:
            Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
            Type: String
            Default: 10.0.2.0/24

Resources:
        # create a VPC
        VPC: 
            Type: AWS::EC2::VPC
            Properties:
                CidrBlock: !Ref VpcCIDR
                EnableDnsHostnames: true
                Tags: 
                    - Key: Name 
                      Value: !Ref EnvironmentName

        # create an Internet Gateway
        InternetGateway:
            Type: AWS::EC2::InternetGateway
            Properties:
                Tags:
                    - Key: Name
                      Value: !Ref EnvironmentName

        # attach internet gateway to VPC
        InternetGatewayAttachment:
            Type: AWS::EC2::VPCGatewayAttachment
            Properties:
                InternetGatewayId: !Ref InternetGateway
                VpcId: !Ref VPC # using the !Ref keyword to associate the InternetGateway with the VPC above with the name "VPC"
        
        # create one public subnet
        PublicSubnet:
            Type: AWS::EC2::Subnet
            Properties:
                VpcId: !Ref VPC
                AvailabilityZone: !Select [ 0, !GetAZs '' ]
                CidrBlock: !Ref PublicSubnetCIDR
                MapPublicIpOnLaunch: true
                Tags:
                  - Key: Name 
                    Value: !Sub ${EnvironmentName} Public Subnet (AZ2)
        
        # create one private subnet
        PrivateSubnet: 
            Type: AWS::EC2::Subnet
            Properties:
                VpcId: !Ref VPC
                AvailabilityZone: !Select [ 0, !GetAZs '' ]
                CidrBlock: !Ref PrivateSubnetCIDR
                MapPublicIpOnLaunch: false
                Tags: 
                    - Key: Name 
                      Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

        # create nat gateway for public subnet
        NatGateway: 
            Type: AWS::EC2::NatGateway
            Properties: 
                AllocationId: !GetAtt NatGatewayEIP.AllocationId
                SubnetId: !Ref PublicSubnet

        # create nat gateway EIP and, it's creation depends on the internet gateway attachment
        NatGatewayEIP:
            Type: AWS::EC2::EIP # EIP --> Elastic Internet Protocol
            DependsOn: InternetGatewayAttachment
            Properties: 
                Domain: vpc

        # create a public route table
        PublicRouteTable:
            Type: AWS::EC2::RouteTable
            Properties: 
                VpcId: !Ref VPC
                Tags: 
                    - Key: Name 
                    Value: !Sub ${EnvironmentName} Public Routes
        
        # create a private route table
        PrivateRouteTable:
            Type: AWS::EC2::RouteTable
            Properties: 
                VpcId: !Ref VPC
                Tags: 
                    - Key: Name 
                    Value: !Sub ${EnvironmentName} Private Routes (AZ1)
        
        # create association between public subnet and public route table
        PublicSubnetRouteTableAssociation:
            Type: AWS::EC2::SubnetRouteTableAssociation
            Properties:
                RouteTableId: !Ref PublicRouteTable
                SubnetId: !Ref PublicSubnet

        # create association between private subnet and private route table
        PrivateSubnetRouteTableAssociation:
            Type: AWS::EC2::SubnetRouteTableAssociation
            Properties:
                RouteTableId: !Ref PrivateRouteTable
                SubnetId: !Ref PrivateSubnet

        # create a route in the public route table
        PublicRoute: 
            Type: AWS::EC2::Route
            DependsOn: InternetGatewayAttachment
            Properties: 
                RouteTableId: !Ref PublicRouteTable
                DestinationCidrBlock: 0.0.0.0/0
                GatewayId: !Ref InternetGateway

        # create a route in the private route table
        PrivateRoute:
            Type: AWS::EC2::Route
            Properties:
                RouteTableId: !Ref PrivateRouteTable
                DestinationCidrBlock: 0.0.0.0/0
                NatGatewayId: !Ref NatGateway

Outputs: 

    VPC: 
        Description: A reference to the created VPC
        Value: !Ref VPC
        Export:
          Name: !Sub ${EnvironmentName}-VPCID

    VPCPublicRouteTable:
        Description: Public Routing
        Value: !Ref PublicRouteTable
        Export:
          Name: !Sub ${EnvironmentName}-PUB-RT

    VPCPrivateRouteTable1:
        Description: Private Routing AZ1
        Value: !Ref PrivateRouteTable1
        Export:
          Name: !Sub ${EnvironmentName}-PRI1-RT

    PublicSubnet:
        Description: A reference to the public subnet in the 1st Availability Zone
        Value: !Ref PublicSubnet
        Export:
          Name: !Sub ${EnvironmentName}-PUB1-SN

    PrivateSubnet:
        Description: A reference to the private subnet in the 1st Availability Zone
        Value: !Ref PrivateSubnet
        Export:
          Name: !Sub ${EnvironmentName}-PRI1-SN
